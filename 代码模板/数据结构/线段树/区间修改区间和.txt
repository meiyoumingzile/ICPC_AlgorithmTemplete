struct Node{
    int r,l;
    ll sum,lz;
    void addlz(ll a){
        lz+=a;
    }
    void addsum(ll a){
        sum+=a*(r-l);
    }
};
struct LineTree{//区间是左闭 左开[)
    Node tree[MAX*4];
    void buildTree(int now,ll *b,int l,int r){//建树
        tree[now].l=l;
        tree[now].r=r;
        tree[now].lz=0;
        if(r-l==1){
            tree[now].sum=b[l];
            return;
        }
        int mid=(l+r)/2,next=now*2;
        buildTree(next,b,l,mid);
        buildTree(next+1,b,mid,r);
        tree[now].sum=tree[next].sum+tree[next+1].sum;
    }

    void downLz(cint now){
        cint next=now*2;
        if(tree[now].lz!=0){
            tree[next].addlz(tree[now].lz);
            tree[next+1].addlz(tree[now].lz);
            tree[next].addsum(tree[now].lz);
            tree[next+1].addsum(tree[now].lz);
        }
        tree[now].lz=0;
    }
    void add(int now,int l,int r,ll a){
        Node &t=tree[now];
        const int mid=(t.r+t.l)/2,next=now*2;
        if(t.l==l&&t.r==r){
            t.addlz(a);
            t.addsum(a);
        }else{
            downLz(now);//没走到根节点更新
            if(mid>=r){
                add(next,l,r,a);
            }else if(mid<=l){
                add(next+1,l,r,a);
            }else{
                add(next,l,mid,a);
                add(next+1,mid,r,a);
            }
            t.sum=tree[next].sum+tree[next+1].sum;
        }
    }
    ll searchSum(int now,int l,int r){
        Node &t=tree[now];
        const int mid=(t.r+t.l)/2,next=now*2;
        if(t.l==l&&t.r==r){
            return t.sum;
        }else{
            downLz(now);
            ll ans=0;
            if(mid>=r){
                ans=searchSum(next,l,r);
            }else if(mid<=l){
                ans=searchSum(next+1,l,r);
            }else{
                ans=searchSum(next,l,mid)+searchSum(next+1,mid,r);
            }
            //t.sum=tree[next].sum+tree[next+1].sum;
            return ans;
        }
    }
    void println(int n){
        int k=1,i,j;
        for(i=1;k<2*n;i*=2){
            for(j=0;j<i;j++){
                printf("[%d %d):sum:%lld lz:%lld  ",tree[k+j].l,tree[k+j].r,tree[k+j].sum,tree[k+j].lz);
            }printf("\n");
            k+=i;
        }
    }
};