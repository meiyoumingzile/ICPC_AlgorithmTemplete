#include<stdlib.h>
#include <iostream>
#include <cmath>
#include <list>
#include <cstring>
using namespace std;




struct point
{
    double lng;
    double lat;
};

double getDistance(double longitude1, double latitude1, double longitude2, double latitude2, int unit=1, int decimal=2)
{
    double EARTH_RADIUS = 6370.996; // 地球半径系数
    double PI = 3.1415926;
    double radLat1 = latitude1 * PI / 180.0;
    double radLat2 = latitude2 * PI / 180.0;
    double radLng1 = longitude1 * PI / 180.0;
    double radLng2 = longitude2 * PI /180.0;

    double a = radLat1 - radLat2;
    double b = radLng1 - radLng2;

    double distance = 2 * asin(sqrt(pow(sin(a/2),2) + cos(radLat1) * cos(radLat2) * pow(sin(b/2),2)));
    distance = distance * EARTH_RADIUS * 1000;

    if(unit==2){
        distance = distance / 1000;
    }
    return distance;
}

double miniDistance_v(double x, double y, double x1, double y1, double x2, double y2)
{
    double cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);
    if (cross <= 0) return getDistance(x, y ,x1, y1);
    double d2 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
    if (cross >= d2) return getDistance(x, y ,x2, y2);
    double r = cross / d2;
    double px = x1 + (x2 - x1) * r;
    double py = y1 + (y2 - y1) * r;
    return getDistance(x, y ,px, py);
}

list<point> * str_to_zu(char * zu_point_str)
{

    list<point> *tmp_list = new list<point>;
    list<char *> tmp_str;
    list<char *>::iterator it;
    char* temp_str = strtok(zu_point_str,",");
    while(temp_str)
    {
        tmp_str.push_back(temp_str);
        temp_str = strtok(NULL, ",");
    }
    for(it=tmp_str.begin(); it!=tmp_str.end(); it++){
        double tmp_lng = atof( strtok(*it," ") );
        double tmp_lat = atof( strtok(NULL," ") );

        point * tmp_point = new point;
        tmp_point->lng = tmp_lng;
        tmp_point->lat = tmp_lat;
        tmp_list->push_back(*tmp_point);
    }

    return tmp_list;
}

double poi(double x,double y, char * zu_point_str){
    double min = 100000;
    list<point> *zu_point = str_to_zu(zu_point_str);
    list<point>::iterator it;
    for(it=zu_point->begin(); it!=zu_point->end(); it++){
        //cout<<(*it).lng<<"\t"<<(*it).lat<<endl;
        list<point>::iterator it1=it;
        if((++it1)==zu_point->end())
        {
            break;
        }
        double tmp = miniDistance_v(x, y, (*it).lng, (*it).lat, (*it1).lng, (*it1).lat);
        if (tmp < min)
        {
            min = tmp;
        }
    }
    double tmp = miniDistance_v(x, y, zu_point->begin()->lng, zu_point->begin()->lat, zu_point->end()->lng, zu_point->end()->lat);
    if (tmp < min)
    {
        min = tmp;
    }
    return min;
}

int main()
{

    char a[5000] = "116.19367730034722 39.98468478732639,116.19449381510417 39.98496256510417,116.19479085286459 39.98507541232639,116.1951003689236 39.98520128038194,116.1954541015625 39.985355902777776,116.19578857421875 39.985501030815975,116.1965416124132 39.98566433376736,116.19703911675347 39.98583713107639,116.19729166666667 39.986078559027774,116.19738335503472 39.98632080078125,116.19726155598958 39.986652560763886,116.19695773654514 39.987018771701386,116.19672281901042 39.987338595920136,116.1964892578125 39.98765842013889,116.19631293402777 39.98792914496528,116.19624674479167 39.988187120225696,116.19631130642361 39.98840386284722,116.19652153862847 39.988995496961806,116.19696478949653 39.990010308159725,116.19698811848959 39.99044677734375,116.19681559244792 39.9908970811632,116.19668484157987 39.991556532118054,116.19594889322917 39.99296522352431,116.19558892144097 39.993008897569446,116.19482720269097 39.99287434895833,116.19449435763889 39.99378824869792,116.19438910590277 39.993999837239585,116.19443033854166 39.99408067491319,116.19451388888889 39.99429389105903,116.19485405815972 39.99442165798611,116.19516520182292 39.99455159505208,116.19532389322917 39.99471381293403,116.19540662977431 39.994892849392365,116.1953968641493 39.99510769314236,116.19527289496527 39.99532470703125,116.19518391927083 39.99541341145834,116.19510172526041 39.9956005859375,116.19509331597222 39.99577663845486,116.19510226779514 39.99600179036458,116.19519748263889 39.996189507378475,116.19516438802083 39.99625434027778,116.19511881510417 39.99643093532986,116.19494493272569 39.996730414496525,116.19478515625 39.997042914496525,116.19459391276041 39.997325846354165,116.19434950086806 39.99750949435764,116.19411214192708 39.99767822265625,116.19365641276042 39.997813856336805,116.19310085720485 39.99805501302083,116.1924294704861 39.998285319010414,116.19189154730903 39.99852132161458,116.19109402126736 39.99900173611111,116.19072211371528 39.999324815538195,116.19050998263889 39.99934434678819,116.19026285807291 39.99929578993056,116.19012858072917 39.99932942708333,116.19004909939235 39.99943115234375,116.18985378689236 39.99948187934028,116.18960476345487 39.99947319878472,116.18911783854166 39.999287109375,116.18889756944445 39.99912163628472,116.1885582139757 39.99873291015625,116.18829291449653 39.99806477864583,116.18813151041667 39.99763481987847,116.18783827039931 39.9972314453125,116.18471489800348 39.99682915581597,116.18216254340278 39.996962890625,116.18082628038195 39.99683620876736,116.17447998046875 39.99557698567708,116.17389811197917 39.99504855685764,116.17376247829861 39.994493815104164,116.17376871744791 39.99408799913194,116.17393174913194 39.99363986545139,116.17392795138889 39.99346110026042,116.1738609483507 39.99315809461805,116.17364067925347 39.99303304036459,116.17327962239584 39.99283067491319,116.17317762586805 39.992656521267364,116.17343722873264 39.99255452473958,116.17380018446181 39.99250515407986,116.17415690104167 39.99235812717014,116.17418891059027 39.99205186631944,116.17435275607639 39.99192816840278,116.17477945963542 39.99197211371528,116.1751611328125 39.99213460286458,116.17550998263889 39.99238633897569,116.17613308376735 39.992586805555554,116.1763671875 39.992489420572916,116.17666097005208 39.99213107638889,116.17666314019097 39.991778428819444,116.17652967664931 39.991450737847224,116.17645806206598 39.99122531467014,116.17629855685765 39.99102511935764,116.17633165147569 39.99082817925347,116.17656656901042 39.99069932725695,116.1775732421875 39.99049424913194,116.17796305338541 39.99027289496528,116.17819363064235 39.99011827256945,116.17823215060764 39.9898695203993,116.17813232421875 39.989292534722225,116.17825629340278 39.98895941840278,116.17917236328125 39.98835177951389,116.18008843315972 39.98794759114583,116.18079047309028 39.98753526475694,116.18141628689236 39.98725694444445,116.18227240668402 39.987049424913195,116.18311767578125 39.98692355685764,116.1834779188368 39.98672417534722,116.18376980251736 39.9865234375,116.18410346137152 39.98639811197916,116.18465766059028 39.98621283637153,116.18514621310764 39.98601372612847,116.18547227647569 39.98563585069444,116.18594211154515 39.9848486328125,116.18630316840277 39.98450927734375,116.18659749348959 39.98431179470486,116.18692030164931 39.9843359375,116.18731852213541 39.98446044921875,116.18787027994792 39.98455756293403,116.1882004123264 39.98451199001736,116.18875325520834 39.984332139756944,116.18908908420138 39.98432752821181,116.1895081922743 39.98440483940972,116.19000244140625 39.98432888454861,116.19026177300347 39.98422960069445,116.19052680121528 39.98427978515625,116.19084526909722 39.98442599826389,116.1913037109375 39.984500868055555,116.19190755208334 39.98441243489583,116.19236518012153 39.98440321180556,116.19279975043403 39.98448703342014,116.19325276692709 39.984485677083335,116.19367730034722 39.98468478732639";
    double b;
    double x=116.178688,y=39.99748;
    b=poi(x, y, a);
    cout<<b<<endl;
    return 0;
}
/*
cout.precision(20);
cout<<tmp_lng<<"\t"<<tmp_lat<<endl; */
